import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import models.AggregationTypeEnum;
import models.Reactor;
import models.RegionMap;
import utils.ConsumptionCalc;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.List;
import java.util.*;

public class Aggregation {

    private final JFrame aggregationFrame = new JFrame("Aggregation");
    private JPanel aggregationPanel;
    private JTable aggregationTable;
    private JComboBox<AggregationTypeEnum> aggregationComboBox;
    private JButton closeButton;

    private final Map<AggregationTypeEnum, DefaultTableModel> tableMap = new HashMap<>();
    private final ConsumptionCalc consumptionCalc;

    public Aggregation(RegionMap regionMap, Map<String, List<Reactor>> reactorsMap) {
        this.consumptionCalc = new ConsumptionCalc(reactorsMap, regionMap);
        initWindow();
    }

    public Boolean getState() {
        return aggregationFrame.isVisible();
    }

    private void initWindow() {
        initAggregationFrame();
        initCloseButton();
        initAggregationComboBox();
        initTable();
    }

    private void initTable() {
        Arrays.stream(AggregationTypeEnum.values()).forEach(type -> {
            DefaultTableModel table = new DefaultTableModel();
            table.setColumnIdentifiers(
                    switch (type) {
                        case NOT_CHOSEN -> null;
                        case BY_COUNTRY -> new String[]{"Country", "Consumption", "Year"};
                        case BY_OPERATOR -> new String[]{"Operator", "Consumption", "Year"};
                        case BY_REGION -> new String[]{"Region", "Consumption", "Year"};
                    });
            tableMap.put(type, table);
        });
    }

    private void initAggregationComboBox() {
        aggregationComboBox.setModel(new DefaultComboBoxModel<>(AggregationTypeEnum.values()));
        aggregationComboBox.setSelectedItem(AggregationTypeEnum.NOT_CHOSEN);

        aggregationComboBox.addActionListener(actionEvent -> {
            if (!Objects.equals(aggregationComboBox.getSelectedItem(), AggregationTypeEnum.NOT_CHOSEN) &&
                    tableMap.get((AggregationTypeEnum) aggregationComboBox.getSelectedItem()).getDataVector().isEmpty()) {
                buildTable((AggregationTypeEnum) Objects.requireNonNull(aggregationComboBox.getSelectedItem()));
            } else {
                aggregationTable.setModel(tableMap.get((AggregationTypeEnum) aggregationComboBox.getSelectedItem()));
            }
        });
    }

    private void initAggregationFrame() {
        aggregationFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        aggregationFrame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        aggregationFrame.setVisible(true);
        aggregationFrame.getContentPane().add(BorderLayout.CENTER, aggregationPanel);
    }

    private void initCloseButton() {
        closeButton.addActionListener(actionEvent -> {
            aggregationFrame.setVisible(false);
            aggregationFrame.dispose();
        });
    }

    private void buildTable(AggregationTypeEnum aggregationType) {
        Map<String, Map<Integer, Double>> consumptionMapByYear = switch (aggregationType) {
            case NOT_CHOSEN -> new HashMap<>();
            case BY_COUNTRY -> consumptionCalc.calcConsumptionByCountries();
            case BY_OPERATOR -> consumptionCalc.calcConsumptionByOperator();
            case BY_REGION -> consumptionCalc.calcConsumptionByRegions();
        };

        consumptionMapByYear.forEach((key, consumptionMap) ->
                consumptionMap.forEach((year, consumption) ->
                        tableMap.get(aggregationType).addRow(new Object[]{
                                        key, String.format("%1$.2f", consumption), year
                                }
                        )));

        aggregationTable.setModel(tableMap.get(aggregationType));
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        aggregationPanel = new JPanel();
        aggregationPanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        aggregationComboBox = new JComboBox();
        aggregationComboBox.setToolTipText("Choose aggregation type");
        aggregationPanel.add(aggregationComboBox, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        closeButton = new JButton();
        closeButton.setText("Close");
        aggregationPanel.add(closeButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        aggregationPanel.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        aggregationTable = new JTable();
        aggregationTable.setEnabled(false);
        scrollPane1.setViewportView(aggregationTable);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return aggregationPanel;
    }

}
