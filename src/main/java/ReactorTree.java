import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import fileReaders.DataBaseReader;
import fileReaders.FileTypeEnum;
import models.Reactor;
import models.ReactorType;
import models.RegionMap;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import java.awt.*;
import java.io.File;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;

public class ReactorTree {

    private final JFrame reactorTreeFrame = new JFrame("Reactor tree");
    private JButton fileChooserButton;
    private JButton aggregatedDataButton;
    private JTree reactorsTree;
    private JPanel reactorTreePanel;
    private final Map<FileTypeEnum, Map<String, ReactorType>> fileHistory;
    private final FileTypeEnum currentFileType;
    private Map<String, List<Reactor>> reactorsMap;
    private RegionMap regionMap;
    private Aggregation aggregation;

    public ReactorTree(Map<FileTypeEnum, Map<String, ReactorType>> fileHistory, FileTypeEnum currentFileType) {
        this.fileHistory = fileHistory;
        this.currentFileType = currentFileType;
        initWindow();
    }

    public Boolean getState() {
        return reactorTreeFrame.isVisible();
    }

    private void initWindow() {
        initReactorTreeFrame();
        initFileChooserButton();
        initAggregatedDataButton();
    }

    private void initReactorTreeFrame() {
        reactorTreeFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        reactorTreeFrame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        reactorTreeFrame.setVisible(true);
        reactorTreeFrame.getContentPane().add(BorderLayout.CENTER, reactorTreePanel);
    }

    private void initFileChooserButton() {
        fileChooserButton.addActionListener(actionEvent -> {
            JFileChooser fileChooser = new JFileChooser();

            fileChooser.setCurrentDirectory(new File("./src/main/resources"));

            FileNameExtensionFilter filter = new FileNameExtensionFilter(
                    "SQLite database files", "db");
            fileChooser.setFileFilter(filter);

            if (fileChooser.showOpenDialog(reactorTreePanel) == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();

                if (!(file.getName().toLowerCase().endsWith(".db"))) {
                    JOptionPane.showMessageDialog(
                            null, "Incorrect file format", "Error",
                            JOptionPane.ERROR_MESSAGE
                    );
                    return;
                }

                buildTree(file);
                aggregatedDataButton.setEnabled(true);
            }
        });
    }

    private void initAggregatedDataButton() {
        aggregatedDataButton.addActionListener(actionEvent -> {
            if (aggregation == null || !aggregation.getState()) {
                aggregation = new Aggregation(regionMap, reactorsMap);
            }
        });
    }

    private void buildTree(File file) {
        try {
            DefaultTreeModel treeModel = (DefaultTreeModel) reactorsTree.getModel();
            DefaultMutableTreeNode root = new DefaultMutableTreeNode("Reactors");
            reactorsMap = DataBaseReader.importReactors(file, fileHistory.get(currentFileType));
            regionMap = DataBaseReader.importRegions(file);

            reactorsMap.forEach((country, reactorList) -> {
                DefaultMutableTreeNode countryNode = new DefaultMutableTreeNode(country);
                root.add(countryNode);
                reactorList.forEach(reactor -> countryNode.add(new DefaultMutableTreeNode(reactor)));
            });

            treeModel.setRoot(root);
            reactorsTree.setEnabled(true);
            aggregatedDataButton.setEnabled(true);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(
                    null, e.getMessage(), "Error",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        reactorTreePanel = new JPanel();
        reactorTreePanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        fileChooserButton = new JButton();
        fileChooserButton.setText("Load reactors database");
        reactorTreePanel.add(fileChooserButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        aggregatedDataButton = new JButton();
        aggregatedDataButton.setEnabled(false);
        aggregatedDataButton.setText("Aggregation");
        reactorTreePanel.add(aggregatedDataButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        reactorsTree = new JTree();
        reactorsTree.setEnabled(true);
        reactorsTree.setRootVisible(true);
        reactorTreePanel.add(reactorsTree, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return reactorTreePanel;
    }

}
